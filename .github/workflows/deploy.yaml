name: Argo CD Deploy Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'  # Only triggers if files under `apps/` change

jobs:
  validate-and-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensures full Git history is available

      - name: Identify Changed Application Directories
        id: changes
        run: |
          # Ensure we have all branches and commits in case of shallow fetch
          git fetch --no-tags --prune --unshallow || true
          
          # Find changed directories or list all under apps if no previous commit is available
          CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | grep '^apps/' | cut -d'/' -f1-2 | sort -u || find apps -type d -mindepth 1 -maxdepth 1)
          
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
        shell: bash

      - name: Lint and Validate Manifests
        if: ${{ env.changed_dirs }}
        run: |
          for dir in $CHANGED_DIRS; do
            if [ -f "$dir/kustomization.yaml" ]; then
              echo "Validating $dir"
              kubectl kustomize $dir | kubeval
            fi
          done

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      # - name: Argo CD Login
      #   run: |
      #     argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
      #   env:
      #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      #     ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      #     ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      
      - name: Port Forward Argo CD
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          sleep 5  # Wait a few seconds to ensure port-forwarding is active
          echo $! > port_forward_pid.txt  # Save the process ID
      
      - name: Argo CD Login
        run: |
          argocd login localhost:8080 --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
        env:
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

      - name: Sync Only Changed Argo CD Applications
        if: ${{ env.changed_dirs }}
        run: |
          for dir in $CHANGED_DIRS; do
            app_name=$(basename $dir)  # Assuming each subdirectory corresponds to an Argo CD app name
            echo "Syncing application $app_name"
            argocd app sync $app_name
          done
      
      - name: Clean Up Port Forward
        if: always()
        run: |
          kill $(cat port_forward_pid.txt) || true  #Kill the port-forward process if itâ€™s still running
